{{ $JIBRI_USAGE_TIMEOUT := .Env.JIBRI_USAGE_TIMEOUT | default "0" -}}
{{ $JIBRI_RECORDING_RESOLUTION := .Env.JIBRI_RECORDING_RESOLUTION | default "1280x720" -}}
{{ $XMPP_TRUST_ALL_CERTS := .Env.XMPP_TRUST_ALL_CERTS | default "true" | toBool -}}

jibri {

  gmeet-port = "{{ .Env.GMEET_ENV_TCP_PORT }}"
  // A unique identifier for this Jibri
  id = "{{ .Env.JIBRI_INSTANCE_ID }}"
  // Whether or not Jibri should return to idle state after handling
  // (successfully or unsuccessfully) a request.  A value of 'true'
  // here means that a Jibri will NOT return back to the IDLE state
  // and will need to be restarted in order to be used again.
  single-use-mode = false
    api {
      http {
        external-api-port = 2222
        internal-api-port = 3333
      }
      xmpp {
        // See example_xmpp_envs.conf for an example of what is expected here
        environments = [
            {
                // A user-friendly name for this environment
                name = "{{ .Env.XMPP_ENV_NAME }}"
    
                // A list of XMPP server hosts to which we'll connect
                xmpp-server-hosts = [ 
                    "{{ .Env.XMPP_SERVER }}"
                ]
    
                // The base XMPP domain
                xmpp-domain = "{{ .Env.XMPP_DOMAIN }}"

                {{ if .Env.PUBLIC_URL -}}
                // An (optional) base url the Jibri will join if it is set
                base-url = "{{ .Env.PUBLIC_URL }}"
                {{ end -}}
                
                // The MUC we'll join to announce our presence for
                // recording and streaming services
                control-muc {
                    domain = "{{ .Env.XMPP_INTERNAL_MUC_DOMAIN }}"
                    room-name = "{{ .Env.JIBRI_BREWERY_MUC }}"
                    nickname = "{{ .Env.JIBRI_INSTANCE_ID }}"
                }
    
                // The login information for the control MUC
                control-login {
                    domain = "{{ .Env.XMPP_AUTH_DOMAIN }}"
                    username = "{{ .Env.JIBRI_XMPP_USER }}"
                    password = "{{ .Env.JIBRI_XMPP_PASSWORD }}"
                    port = {{ .Env.JIBRI_XMPP_PORT }}
                }

                sip-control-muc {
                    domain = "{{ .Env.XMPP_INTERNAL_MUC_DOMAIN }}"
                    room-name = "{{ .Env.JIBRI_BREWERY_MUC_SIP }}"
                    nickname = "{{ .Env.JIBRI_INSTANCE_ID }}"
                }

                // The login information the selenium web client will use
                call-login {
                    domain = "{{ .Env.XMPP_RECORDER_DOMAIN }}"
                    username = "{{ .Env.JIBRI_RECORDER_USER }}"
                    password = "{{ .Env.JIBRI_RECORDER_PASSWORD }}"
                }
                
                // The value we'll strip from the room JID domain to derive
                // the call URL
                strip-from-room-domain = "{{ .Env.JIBRI_STRIP_DOMAIN_JID }}."
    
                // How long Jibri sessions will be allowed to last before
                // they are stopped.  A value of 0 allows them to go on
                // indefinitely
                usage-timeout = "{{ $JIBRI_USAGE_TIMEOUT }}"
                
                // Whether or not we'll automatically trust any cert on
                // this XMPP domain
                trust-all-xmpp-certs = {{ $XMPP_TRUST_ALL_CERTS }}
            }
        ]
      }
    }
    recording {
      recordings-directory = "{{ .Env.JIBRI_RECORDING_DIR }}"
      {{ if .Env.JIBRI_FINALIZE_RECORDING_SCRIPT_PATH -}}
      finalize-script = "{{ .Env.JIBRI_FINALIZE_RECORDING_SCRIPT_PATH }}"
      {{ end -}}
    }

    ffmpeg {
      resolution =  "{{ $JIBRI_RECORDING_RESOLUTION }}"
      {{ if .Env.JIBRI_FFMPEG_AUDIO_SOURCE -}}
      // The audio source that will be used to capture audio on Linux
      audio-source = "{{ .Env.JIBRI_FFMPEG_AUDIO_SOURCE }}"
      {{ end -}}
      {{ if .Env.JIBRI_FFMPEG_AUDIO_DEVICE -}}
      // The audio device that will be used to capture audio on Linux
      audio-device =  "{{ .Env.JIBRI_FFMPEG_AUDIO_DEVICE }}"
      {{ end -}}
    }


    chrome {
      // The flags which will be passed to chromium when launching
      flags = [
        "--use-fake-ui-for-media-stream",
        "--start-maximized",
        "--kiosk",
        "--enabled",
        "--autoplay-policy=no-user-gesture-required",
        "--ignore-certificate-errors",
        "--disable-dev-shm-usage"
      ]
    }


    {{ if .Env.ENABLE_STATS_D -}}
    stats {
      enable-stats-d = {{ .Env.ENABLE_STATS_D }}
    }
    {{ end -}}

    call-status-checks {
    // If all clients have their audio and video muted and if Jibri does not
    // detect any data stream (audio or video) comming in, it will stop
    // recording after NO_MEDIA_TIMEOUT expires.
    no-media-timeout = 60 seconds

    // If all clients have their audio and video muted, Jibri consideres this
    // as an empty call and stops the recording after ALL_MUTED_TIMEOUT expires.
    all-muted-timeout = 10 minutes

    // When detecting if a call is empty, Jibri takes into consideration for how
    // long the call has been empty already. If it has been empty for more than
    // DEFAULT_CALL_EMPTY_TIMEOUT, it will consider it empty and stop the recording.
    default-call-empty-timeout = 60 seconds
  }
}